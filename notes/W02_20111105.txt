Chapter 4:  Packages

P39:  "Rightly understood, the package mechanism allows the design of the overall software system to be disentangled and made independent in a number of important ways."

P39:  "If your package declarations don't reflect your design decisions, you aren't using the system correctly"

The basic function of  a package is to create a namespace.

P40:  "Java is a name-equivalence language and environment, which means that things with the same name are the same...once some class with a name is loaded, any class with that same name will use the loaded implementation.
  /* Hmmm.  He relegates the role of classloaders to a footnote on P40?!?  But J2E Containers rely on this? */

P40:  "...a convention was started early in the history of Java development that a package name should start with the domain name (in reverse order)"

java.* and javax.* are reserved

/* The recomendation of email address for personal work is interesting, but feelst too longwinded for me "com.grmail.robertkuhar" */

P41:  "...the unnamed package is a form of namespace limbo, where code written by confused, obstinate, or lazy programmers..." is placed...JUST SAY NO

/* I actually see a role for the unnamed package.  It has always bothered me how difficult it is to execute some java from the command line.  Packages have contributed to this difficulty.  How many ClassNotFoundExceptions the first time you tried java from the command line? */

import com.sun.foo.bar.*;

P41:  Fighting words:  "...This more general form of the import statement is quite popular, but should be avoided if you can." 
  /* I could not disagree more with the author on this point...and shouldn't the whole interface based design mitigate the issue of extra dependencies? */
"...you are also introducting extra dependencies into your code..." /* Is this true? */

Packages and Access Control

P43:  "Java has an additional access category connected to the package system...protected and no access spec...access from methods that are in the package but have no relationship to the defining class"  /* I AM AMAZED that is shows up in a book about "the good parts" */

/* In this day and age, does anyone rely upon package protected? */

P43:  "It is important to keep in mind one difference between the hierarchy formed by packages and the hierarchy formed by classes"
  Class Hierarchy is inclusive;
    an object is an instance of a class it is also an instance of any class above its parent in the hierarchy.
  Package Hierarchy; NOT POLYMORPHIC
    Fields and methods that have package protection can be accessed only by things that are in exactly the same package. 
    /* I actually find this frustrating sometimes, but never really worried about it.  I suppose if it was incluslive, my "import .*" views may change */

P45:  on "statistics" vs. "impl":  "The reason for the split is to allow clients of the basic statistics storing classes to be dependent only on the interfaces..."

P45:  in defense of "no .*, no how":  "If nothing else, too long a list of imports from another package shows an interconnection between the package being imported and the package doing the importing that might indicate a design flaw."
  /* I'll accept this, yeah, but then WTF about 2 imports to get one useful List, and another two when I need a Map, on call to keySet on that Map, another freaking import...when does it end?  I like that the IDE's (eclipse at least) provide some way to put a threshold in.  My threshold is set to zero. */

/* I don't understand why he paused at all on the NotEnoughAtBatsException...its on the method signatures of his interface, no?  In my opinion, you can try to remain too abstract, which itself is a huge code smell. */


Packages and the Filesystem

P46:  "...the required interaction between the package system and the filesystem is both regrettable and a pain"
  /* I am disturbed...I LIKE THIS PART. */

P46:  "...This is where the compiler will look for the source files that are defined in that component, and this is where the classloaders will look for the object files that contain the binaries for the classes in those packages"
  /* The compiler doesn't do what he suggests here, the compiler is happy to compile a file that isn't in the directory that its packages suggest, just ask any IntelliJ user (Eclipse is less forgiving).  I would say that he is effectively correct, but not technically correct. */

cd notes
javac PackageFilesystemWTF.java
# creates a .class file but I've never been able to figure out how to run it
javac -sourcepath . -d . PackageFilesystemWTF.java
# this builds the one/two/three directory structure and puts the class there.

  /* While his complaints are somewhat true, once these things all get thrown into a common container, and the container splays them out into a single direcory, the fact that a class'es Namespace defines its directory location becomes quite the enabler. */

P48:  "...the integrated development environment with database never appeared..."
  /* Again, I disagree.  IBM's VisualAge, which begat Eclipse, PUT THE SOURCE FILES IN A DATABASE...much to the chagrin of its users when the database crashed */


Chapter 5:  Garbage Collection
P48:  "Now we are going to turn to a good part of Java that lets us not do something...garbage collection.  Because of this feature, you don't have to do explicit memory management within your program."

P48:  "There are still some things you have to understand to use the feature correctly."

P48:  "It is difficult to keep track of when and how to clean up the memory used by objects."

P49:  "Studies done around the time of the introduction of Java...over half of the bugs in C and C++ programs were caused by problems with memory management"  /* I would like to know if this still holds true...what about iOS? */

/* You know, I've always hated the "Java doesn't have pointers" argument.  From my perspective, except for ints, longs, and the like JAVA ONLY HAS POINTERS.  Am I alone?  Right after I figured out how to overcome the package thing when launching java from the command line, I experienced my first NullPointerException, but we don't have pointers?  Hmmm, someone is not telling the whole truth. */

P51:  "All you can do with a reference (other than passing it around to others) is to access field or methods of the object to which the reference refers"
  - You can't arithmetic with it, so that is not like a pointer
  - This feature alone makes Java less error prone and more secure than C/C++

P52:  "Garbage collection requires that the system know the difference between references to objects and other forms of data"
  /* In Java...what are "other forms of data"? */

An environment that includes garbage collection needs to allow objects to be moved to avoid fragmentation.

P52:  "Generational garbage collectors depend on the observation that most objects are short-lived."

Generational Garbage Collectors keep 2 Heaps
    1.  New Objects
    2.  Objects that have survived at least one garbage-collection sweep

"Know your worst friend, the Garbage Collector" by Romain Guy http://java.sys-con.com/node/84695 


Memory Leaks
  Memory leaks are still possible when references to objects are left in other long-lived objects.

P53:  "Most objects are small and most programs don't run for that long" /* I beg to differ.  In the last 10 years, virtually ALL THE PROGRAMS I HAVE WORKED ON are intended to run for very long times */

/* !!! I did not know of java.util.UUID !!! */

P55:  "Because we now have a way to store references to an object, we also have a way to defeat the garbage collector."

/* His leak is rather contrived...he should have mentioned something like static initializer hell */

/* What about "weak references" and "soft references"? */
"Plugging memory leaks with weak references" by Brian Goetz http://www.ibm.com/developerworks/java/library/j-jtp11225/index.html
"Plugging memory leaks with soft references" by Brian Goetz http://www.ibm.com/developerworks/java/library/j-jtp01246/index.html 

P56:  Java does not help with the management of Files or Sockets or other limited system resources.

P56:  Finalizers tempt some programmers to try to delegat the management of such resource to the garbage collector...bad idea.

P56:  "Finalizers are the dual of constructors...a finalizer will be run when an object is about to be deleted by the garbage collector.

P57:  /* DOCTOR, HEAL THYSELF!?!  The code won't compile and even if it did...OMG!  Swallowed exceptions?  System.out rather than System.err?  No null checks? Holy crap! Credibility-- */

P58:  "...keeping the ObjectInputStream open...ties up a file handle for the lifecycle of the object"

P59:  "...there is no guarantee that the finalizer will ever be called on an object...it is possible for a program to end without invoking the finalizers"

He suggests that you trade finalizer for a program shutdown method.

P61:  "This is the coding equivalent of wearing both a belt and suspenders, and is evidence of a level of paranoia that is common among software developers.  If such a call is made, we will also display a message, since writing state in the finalizer shows that some change isn't being recorded in the main body of the program.  This is a lurking bug that we will want to fix."
  /* So, he hasn't heard of System.err? */

Conclusions:
  1.  Garbage Collection is good
  2.  Don't hold on to references you don't need, you are killing the garbage collector
  3.  Don't abuse the Garbage Collector sub-system in an attempt to manage other resources

Further Reading:  
  "Java SE6 HotSpot[tm] Virtual Machine Garbage Collection Tuning" http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html?printOnly=1
  "Know your worst friend, the Garbage Collector" by Romain Guy http://java.sys-con.com/node/84695 
  "Plugging memory leaks with weak references" by Brian Goetz http://www.ibm.com/developerworks/java/library/j-jtp11225/index.html
  "Plugging memory leaks with soft references" by Brian Goetz http://www.ibm.com/developerworks/java/library/j-jtp01246/index.html 
